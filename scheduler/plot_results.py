# Script for plotting the csv outputs of the market clearing run.import matplotlib.pyplot as pltimport numpy as npimport pandas as pdimport osdef datetimes_to_minutes(datetime_array):    ''' Converts an array of datetimes to minutes, starting with 0 '''    minutes_array = np.zeros(len(datetime_array))    for i in range(len(datetime_array)):        tdelta = datetime_array[i] - datetime_array[0]        tminutes = (tdelta.total_seconds())/60        minutes_array[i] = tminutes    return minutes_arraydef plot_grid(xvals, grid_array, xlabel='Minutes', ylabel='Power (MW)', names=None, grid_width=3,              savefig=True, savepath='results.'):    ''' Plots the grid array (by column) in subplots (using all equal x values)'''    grid_height = int(grid_array.shape[1]/grid_width)    fig, axes = plt.subplots(grid_height, grid_width)    fig.set_size_inches(13, 8)    widx, hidx = 0, 0    for i in range(grid_array.shape[1]):        axes[hidx, widx].plot(xvals, grid_array[:,i])        if names is not None:            axes[hidx, widx].set_title(names[i])        if widx == grid_width - 1:            widx = 0            hidx += 1        else:            widx += 1    # Clean up axes    for ax in axes.flat:        ax.set(xlabel=xlabel, ylabel=ylabel)    for ax in axes.flat:        ax.label_outer()        def plot_stack(ax, xarray, yarray):    ax.plot(xarray, yarray)        def csv_to_arrays(filename, filepath='.'):    ''' Loads a csv file and converts it to a time array and grid of values '''    filename = os.path.join(filepath, filename)    df = pd.read_csv(filename)    # Load times by 'Time' key or the first column    try:        datetime_array = pd.to_datetime(df['Time'].values)    except KeyError:        datetime_array = pd.to_datetime(df.iloc[:,0].values)    minutes_array = datetimes_to_minutes(datetime_array)    l = [1 for i, dtype in enumerate(df.dtypes) if dtype == np.float64]    num_grid = sum(l)    grid_array = np.zeros((len(minutes_array), num_grid))    gidx = 0    names = []    for i, dtype in enumerate(df.dtypes):        if dtype == np.float64:            grid_array[:,gidx] = df.iloc[:,i].values            names += [df.columns[i].split('_')[-1]] # Not a generic name parser...            gidx += 1    return minutes_array, grid_array, names    # Battery dispatch characteristics: Power, SoC, Temperaturesavedir = 'saved/TS_market'resource_files = ['power.csv', 'soc.csv', 'temp.csv']ylabels = ['Power (MW)', 'SoC (MWh)', r'Temp ($^\circ$C)']plt.ion()for i, filename in enumerate(resource_files):    minutes_array, grid_array, names = csv_to_arrays(filename, savedir)    if filename == 'power.csv':        power_array = 1.0*grid_array    plot_grid(minutes_array, grid_array, names=names, ylabel=ylabels[i])plt.show()# Aggregate power percent time on/offpcnt_time_on = np.zeros(power_array.shape[1])for i in range(power_array.shape[1]):    on = (np.abs(power_array[:,i]) > 0.01)    pcnt_time_on[i] = np.sum(on)/power_array.shape[0]print(f"Average percent time on is {np.mean(pcnt_time_on)} +/- {np.std(pcnt_time_on)}")# Now plot LMP over timelmp_file = 'lmp.csv'minutes_array, grid_array, names = csv_to_arrays(lmp_file, savedir)lmp_array = grid_arrayavg_lmp = np.mean(lmp_array, axis=1)plt.figure('LMP')plt.plot(minutes_array, avg_lmp)plt.show()print("Max LMP:", np.max(lmp_array))# Now profit over time (broken out by category)profit_types = ['EN', 'RGU', 'RGD', 'SPR', 'NSP', 'VIR', 'DEG']rid = 'R00229'pids = ['p00002']fig = plt.figure('Profit by type')ax = plt.gca()for pid in pids:    minutes_array, grid_array, names = csv_to_arrays(f'profit_{pid}.csv', savedir)    plt.plot(minutes_array, np.cumsum(grid_array[:,0]))plt.show()# for ptype in profit_types:#     mid = 'rid'#     if ptype == 'VIR':#         mid = 'pid'#     fname = f'profit_{mid}_{ptype}.csv'#     minutes_array, grid_array, names = csv_to_arrays(fname, savedir)#     grid_idx = [i for i in range(len(names)) if rid in names[i] or pid in names[i]][0]#     plot_stack(ax, minutes_array, grid_array[:,grid_idx])#     if ptype == 'EN':#         total = grid_array[:,grid_idx]#         tot_minutes = 1.0*minutes_array#     else:#         tmask = tot_minutes